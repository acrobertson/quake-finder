{"version":3,"sources":["MapContainer.js","Nav.js","App.js","serviceWorker.js","index.js"],"names":["MapContainer","_Component","_getPrototypeOf2","_this","Object","classCallCheck","this","_len","arguments","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","concat","state","showingInfoWindow","activeMarker","selectedPlace","handleMarkerClick","props","marker","e","setState","onClose","inherits","createClass","key","value","_this2","react_default","a","createElement","dist","google","style","width","height","position","initialCenter","lat","lng","quakes","map","quake","id","title","properties","place","mag","url","onClick","geometry","coordinates","name","visible","className","href","target","rel","Component","GoogleApiWrapper","apiKey","process","Nav","today","moment","format","reactstrap_es","onSubmit","handleSubmit","type","min","max","fromDate","onChange","handleInputChange","toDate","minMag","maxMag","outline","App","event","defineProperty","preventDefault","URL","params","starttime","endtime","minmagnitude","maxmagnitude","keys","forEach","searchParams","append","fetch","then","res","json","result","isLoaded","features","error","resultCount","src_Nav","src_MapContainer","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3dbb6e65.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { GoogleApiWrapper, Marker, InfoWindow, Map } from \"google-maps-react\";\n// import CurrentLocation from \"./Map\";\n\nexport class MapContainer extends Component {\n  state = {\n    showingInfoWindow: false,\n    activeMarker: {},\n    selectedPlace: {}\n  };\n\n  handleMarkerClick = (props, marker, e) =>\n    this.setState({\n      selectedPlace: props,\n      activeMarker: marker,\n      showingInfoWindow: true\n    });\n\n  onClose = props => {\n    if (this.state.showingInfoWindow) {\n      this.setState({\n        showingInfoWindow: false,\n        activeMarker: null\n      });\n    }\n  };\n\n  render() {\n    const style = {\n      width: \"100%\",\n      height: \"100%\",\n      position: \"fixed\"\n    };\n\n    return (\n      <Map\n        google={this.props.google}\n        style={style}\n        initialCenter={{\n          lat: 42.39,\n          lng: -72.52\n        }}\n      >\n        {this.props.quakes.map(quake => (\n          <Marker\n            key={quake.id}\n            title={quake.properties.title}\n            place={quake.properties.place}\n            mag={quake.properties.mag}\n            url={quake.properties.url}\n            onClick={this.handleMarkerClick}\n            position={{\n              lat: quake.geometry.coordinates[0],\n              lng: quake.geometry.coordinates[1]\n            }}\n            name={\"current location\"}\n          />\n        ))}\n        <InfoWindow\n          marker={this.state.activeMarker}\n          visible={this.state.showingInfoWindow}\n          onClose={this.onClose}\n        >\n          <div className=\"InfoWindow\">\n            <h1>{this.state.selectedPlace.title}</h1>\n            <h2>{this.state.selectedPlace.place}</h2>\n            <p>{this.state.selectedPlace.mag} magnitude</p>\n            <a\n              href={this.state.selectedPlace.url}\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              More Info\n            </a>\n          </div>\n        </InfoWindow>\n      </Map>\n    );\n  }\n}\n\nexport default GoogleApiWrapper({\n  apiKey: process.env.REACT_APP_MAPS_API\n})(MapContainer);\n","import React, { Component } from \"react\";\nimport { Form, FormGroup, Input, Label, Button } from \"reactstrap\";\nimport moment from \"moment\";\n\nexport class Nav extends Component {\n  render() {\n    const today = moment().format(\"YYYY-MM-DD\");\n    return (\n      <div className=\"Nav\">\n        <h1>QUAKE FINDER</h1>\n        {/* <h2>Find earthquakes around the world</h2> */}\n        <p>\n          Select a date and magnitude range, click search, and check the map!\n        </p>\n        <Form onSubmit={this.props.handleSubmit}>\n          <FormGroup>\n            <h3>Date Range</h3>\n            <Label>From:</Label>\n            <Input\n              type=\"date\"\n              id=\"from-date\"\n              name=\"fromDate\"\n              min=\"1900-01-01\"\n              max={today}\n              value={this.props.fromDate}\n              onChange={this.props.handleInputChange}\n            />\n          </FormGroup>\n          <FormGroup>\n            <Label>To:</Label>\n            <Input\n              type=\"date\"\n              id=\"to-date\"\n              name=\"toDate\"\n              min=\"1900-01-01\"\n              max={today}\n              value={this.props.toDate}\n              onChange={this.props.handleInputChange}\n            />\n          </FormGroup>\n          <FormGroup>\n            <h3>Magnitude Range</h3>\n            <label>From:</label>\n            <input\n              type=\"number\"\n              id=\"min-mag\"\n              name=\"minMag\"\n              min=\"0\"\n              max=\"9\"\n              value={this.props.minMag}\n              onChange={this.props.handleInputChange}\n            />\n          </FormGroup>\n          <FormGroup>\n            <label>To:</label>\n            <input\n              type=\"number\"\n              id=\"to-mag\"\n              name=\"maxMag\"\n              min=\"1\"\n              max=\"10\"\n              value={this.props.maxMag}\n              onChange={this.props.handleInputChange}\n            />\n          </FormGroup>\n          {/* <input type=\"submit\" value=\"submit\" /> */}\n          <Button outline>search</Button>{\" \"}\n        </Form>\n      </div>\n    );\n  }\n}\n\nexport default Nav;\n","import React, { Component } from \"react\";\nimport MapContainer from \"./MapContainer\";\nimport Nav from \"./Nav\";\nimport \"./custom.scss\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      fromDate: \"2018-04-19\",\n      toDate: \"2018-04-20\",\n      minMag: 0,\n      maxMag: 10,\n      error: null,\n      isLoaded: false,\n      resultCount: 0,\n      quakes: []\n    };\n  }\n\n  handleInputChange = event => {\n    const target = event.target;\n    const value = target.value;\n    const name = target.name;\n\n    this.setState({\n      [name]: value\n    });\n  };\n\n  // fetch quake data w/ provided filters\n  handleSubmit = event => {\n    event.preventDefault();\n\n    const url = new URL(\"https://earthquake.usgs.gov/fdsnws/event/1/query\");\n    const params = {\n      format: \"geojson\",\n      starttime: this.state.fromDate,\n      endtime: this.state.toDate,\n      minmagnitude: this.state.minMag,\n      maxmagnitude: this.state.maxMag\n    };\n    Object.keys(params).forEach(key =>\n      url.searchParams.append(key, params[key])\n    );\n\n    fetch(url.href)\n      .then(res => res.json())\n      .then(\n        result => {\n          this.setState({\n            isLoaded: true,\n            quakes: result.features\n          });\n        },\n        error => {\n          this.setState({\n            isLoaded: true,\n            error\n          });\n        }\n      );\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Nav\n          handleSubmit={this.handleSubmit}\n          handleInputChange={this.handleInputChange}\n          fromDate={this.state.fromDate}\n          toDate={this.state.toDate}\n          minMag={this.state.minMag}\n          maxMag={this.state.maxMag}\n        />\n        <MapContainer quakes={this.state.quakes} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import \"bootstrap/dist/css/bootstrap.min.css\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}